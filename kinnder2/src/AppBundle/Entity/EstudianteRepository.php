<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EstudianteRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EstudianteRepository extends EntityRepository
{
    public function getDataForList($page = 0, $limit = 10, $orderBy = 'apellido', $order = 'ASC', $egresado = false, $future = false)
    {
        $futureDql = ' and e.anioIngreso > :anioIngreso';
        if (!$future) {
            $futureDql = ' and e.anioIngreso <= :anioIngreso';
        }

        $dql = sprintf('SELECT e.id, e.nombre, e.apellido, e.fechaNacimiento, e.referenciaBancaria, c.name as clase FROM AppBundle:Estudiante e left join e.clase c where e.egresado = :egresado %s ORDER BY e.%s %s', $futureDql, $orderBy, $order);

        return $this->getEntityManager()
            ->createQuery($dql)
            ->setParameters(array(
              'egresado' => $egresado,
              'anioIngreso' => date('Y'),
            ))
            ->setMaxResults($limit)
            ->setFirstResult(($page * $limit))
            ->getResult();
    }

    public function getBrothers($entityId)
    {
        $sqlBrothers = 'select estudiante_from, estudiante_to from estudiante_hermano where estudiante_from = :from or estudiante_to = :to';
        $brothers = $this->getEntityManager()->getConnection()->executeQuery($sqlBrothers, array('from' => $entityId, 'to' => $entityId));
        $brothersIds = array();
        while ($row = $brothers->fetch()) {
            $from = $row['estudiante_from'];
            $to = $row['estudiante_to'];
            if ((int) $from == $entityId) {
                $brothersIds[] = $to;
            } else {
                $brothersIds[] = $from;
            }
        }
        if (count($brothersIds) == 0) {
            return array();
        }

        $dql = 'SELECT e.id, e.nombre, e.apellido, e.fechaNacimiento, c.name as clase, e.egresado, h.name as horario FROM AppBundle:Estudiante e left join e.clase c left join e.horario h where e.id IN (:brothersId)';

        return $this->getEntityManager()->createQuery($dql)->setParameters(array(
        'brothersId' => $brothersIds,
    ))->getResult();
    }
}
